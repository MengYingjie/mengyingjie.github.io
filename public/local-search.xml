<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>🎭面具的使用技巧</title>
    <link href="/archives/43-%E9%9D%A2%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/archives/43-%E9%9D%A2%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>使用<a href="https://github.com/ChatGPTNextWeb/NextChat">NextChat网页应用(ChatGPT Next Web)</a>设置预设对话建立Few-Shot面具，更精准更快捷地使用AI-Chat工具。</p><h1 id="面具示例汇总"><a href="#面具示例汇总" class="headerlink" title="面具示例汇总"></a>面具示例汇总</h1><p>方便第二次阅读使用，第一次阅读可以先看下面具制作过程。</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>输出</td><td>输出</td><td>实现路径指南</td><td>面具示例</td></tr><tr><td>HLD需求分析</td><td>LLD第一章</td><td></td><td></td></tr><tr><td>API接口描述</td><td>TP用例</td><td></td><td></td></tr><tr><td>伪代码</td><td>代码</td><td></td><td></td></tr><tr><td>TP</td><td>Python脚本</td><td></td><td></td></tr><tr><td>TP</td><td>RF脚本</td><td></td><td></td></tr></tbody></table><h1 id="Zero-Shot与Few-Shot"><a href="#Zero-Shot与Few-Shot" class="headerlink" title="Zero-Shot与Few-Shot"></a>Zero-Shot与Few-Shot</h1><h2 id="Zero-Shot"><a href="#Zero-Shot" class="headerlink" title="Zero-Shot"></a>Zero-Shot</h2><p>在 Few-shot 这个概念之上还有一个 Zero-Shot，所以我们先了简单解一下 Zero-Shot</p><p>Zero-Shot Prompting 是一种自然语言处理技术，可以让计算机模型根据提示或指令进行任务处理。ChatGPT 就用到这个技术。</p><p>举个例子，我们可以给 ChatGPT 一个简短的 prompt，比如给出某部电影的名称，它就可以生成一个关于该情节的摘要，而不需要进行电影相关的专门训练。 – 引用自 <strong><a href="https://learningprompt.wiki/docs/tutorial-extras/Zero-Shot%20Prompts">Zero-Shot</a></strong></p><p>Zero-Shot 的优点是方便快捷、发散思维，我不需要给他任何提示，直接就开聊。这也同时是他的缺点，每次相同的提问，极有可能会给你不同的答案。我们可以利用Zero-Shot来进行思维的扩展，例如<strong>技术交流<strong><strong>、</strong></strong>LLD****的设计考虑、代码分析、BUG解决</strong>等。</p><h2 id="Few-Shot"><a href="#Few-Shot" class="headerlink" title="Few-Shot"></a>Few-Shot</h2><p>可以把 Few-Shot 简单理解为，让模型回答问题之前先给它几个<strong>一问一答</strong>的例子（有助于 AI 进行<strong>链式****思维</strong>以提升结果的准确率）。之后你再问相关的问题它就会根据你提供的例子进行规范作答。这就像是一个超级 mini 的 Fine-tuning，由于 GPT 3.5 模型过于强大，我们只需用几个小例子即可得到很好的效果。</p><p>通过 Few-shot 制作面具，引导模型返回更符合我们预期的答案，使ChatGPT成为一个生产力工具，例如<strong>TP生成、<strong><strong>LLD</strong></strong>格式生成、代码生成、****自动化脚本</strong>生成等工具。</p><blockquote><p>深入了解 Few-Shot请参考：<a href="https://learningprompt.wiki/docs/tutorial-extras/Few-Shot%20Prompting">参考连接1</a>，<a href="https://github.com/openai/openai-cookbook/blob/main/techniques_to_improve_reliability.md#few-shot-examples">参考连接2</a></p></blockquote><h1 id="使用Few-Shot制作面具"><a href="#使用Few-Shot制作面具" class="headerlink" title="使用Few-Shot制作面具"></a>使用Few-Shot制作面具</h1><p>区别于我们原来的面具制作，原来的面具（或者提示词）制作全是以用户角度的输入，很难达到训练AI的效果，他只会根据我们的输入内容进行发散回答，导致回答内容很难符合我们的预期。我们以TP生成自动化脚本为例描述面具的制作。</p><h2 id="新建一个面具并设置前置上下文"><a href="#新建一个面具并设置前置上下文" class="headerlink" title="新建一个面具并设置前置上下文"></a>新建一个面具并设置前置上下文</h2><p>点击：面具-查看全部-新建</p><p><img src="43-%E9%9D%A2%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/1182f70ca6531857175a276bf1b4f2bb_MD5.png"></p><h2 id="设置合适的角色和prompt"><a href="#设置合适的角色和prompt" class="headerlink" title="设置合适的角色和prompt"></a>设置合适的角色和prompt</h2><p>前置对话角色描述：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>system</td><td>system 角色定义了 assistant 的主要行为</td></tr><tr><td>user</td><td>用户所代表的角色</td></tr><tr><td>assistant</td><td>GPT所代表的角色</td></tr></tbody></table><p>以TP生成脚本示例设置提示词：</p><p><img src="43-%E9%9D%A2%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/18a97818680096f1f60c954cb6f386dd_MD5.png"></p><p>这里我使用了 1 shot（一个 user + assistant 的问答即 1 shot）来创建这个面具，其中 system 角色定义了 assistant 的主要行为，也就是让模型大概知道它自己是干啥的。后面的 user + assistant prompt 让模型参考应该以何种方式回答问题。指定面具时可以根据需要多设定几个shot。</p><p>具体内容如下：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>system</td><td>你现在是Python专家，我需要你根据我的测试用例编写测试脚本，我会给你提供测试用例，你需要严格按照我的TP用例生成代码。</td></tr><tr><td>user</td><td>TP用例用例如下：<br><br>用例名称：<br><br>云防火墙规则创建、查询、删除（硬墙）<br><br>用例步骤：<br><br>1、构造基础环境<br><br>2、在net_s1下创建port，device_owner为DEVICE_OWNER_VM<br><br>【省略】<br><br>用例期望：<br><br>1、构建成功<br><br>2、大带宽防火墙上有配置：router1配置<br><br>【省略】</td></tr><tr><td>assistant</td><td>我根据你提供TP，生成自动化脚本，以下是测试用例的脚本代码：<br><br>def run_case(): 【省略】</td></tr></tbody></table><h2 id="附带历史消息数设置为-0"><a href="#附带历史消息数设置为-0" class="headerlink" title="附带历史消息数设置为 0"></a>附带历史消息数设置为 0</h2><p>在使用该工具之前，需要先将设置里的附带历史消息数设置为 0，否则消息历史会对之前做的 Few-shot 产生影响。（因为AI是<strong>链式****思维</strong>）</p><p><img src="43-%E9%9D%A2%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/910ba56bc046516ca2eca596131ff90e_MD5.png"></p><h2 id="使用面具"><a href="#使用面具" class="headerlink" title="使用面具"></a>使用面具</h2><p>开始对话</p><p><img src="43-%E9%9D%A2%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/785aec667de7b8ddc47745f30372f7b0_MD5.png"></p><p>输入新的TP脚本</p><p><img src="43-%E9%9D%A2%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/d8c30fb32cfaf40eed9a2591525beedc_MD5.png"></p><p>GPT输出：</p><p>经循环测试，每次输出结果都基本一致，脚本可用度比较高。</p><p><img src="43-%E9%9D%A2%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/b7deb45977cb823eec3fc164f62a5866_MD5.png"></p><h2 id="两次面具的对比"><a href="#两次面具的对比" class="headerlink" title="两次面具的对比"></a>两次面具的对比</h2><p>原来的前置对话是这个样子的：</p><p><img src="43-%E9%9D%A2%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/2c570ef6ed5d5c7cad6e9ba5327a3e56_MD5.png"></p><p>现在的前置对话是这样子的：</p><p><img src="43-%E9%9D%A2%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/1a70270c8c5728677ee3763b55c99bc1_MD5.png"></p>]]></content>
    
    
    <categories>
      
      <category>AIGC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ChatGPT</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>⏰java中的Format时间和时间戳</title>
    <link href="/archives/42-java%E4%B8%AD%E7%9A%84Format%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <url>/archives/42-java%E4%B8%AD%E7%9A%84Format%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://myj.im/">⭐ 孟应杰的网站: myj.im ⭐</a></p></blockquote><h2 id="🧐format时间和时间戳"><a href="#🧐format时间和时间戳" class="headerlink" title="🧐format时间和时间戳"></a>🧐format时间和时间戳</h2><p>Timestamp就是所谓的时间戳。这个主要用在数据库上，你可以再java.sql这个包内找到这个类。</p><p>一般数据库里如果用Date这个类的话，那你取出来的时候只能到某一天，也就是日，但是Timestamp的话，就是到小时一直到纳秒，很精确的。</p><p>时间戳就是一种类型，只是精度很高，比datetime要精确的多，通常用来防止数据出现脏读现象 。</p><p>时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数</p><h2 id="🔃java中format时间和时间戳的转换"><a href="#🔃java中format时间和时间戳的转换" class="headerlink" title="🔃java中format时间和时间戳的转换"></a>🔃java中format时间和时间戳的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> MengYingjie</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/10/26 21:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Long SystemTimeStamp = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;时间:&quot;</span> + SystemTimeStamp);<br>        String timeFormat = stampToDate(SystemTimeStamp);<br>        System.out.println(<span class="hljs-string">&quot;时间戳转换为时间:&quot;</span> + timeFormat);<br>        Long timeStamp = dateToStamp(timeFormat);<br>        System.out.println(<span class="hljs-string">&quot;时间转换为时间戳:&quot;</span> + timeStamp);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将时间转换为时间戳</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeFormat format 时间格式</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 时间戳时间格式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Long <span class="hljs-title">dateToStamp</span><span class="hljs-params">(String timeFormat)</span> </span>&#123;<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        Long timeStamp = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            timeStamp = sdf.parse(timeFormat).getTime();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;传入了null值&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> timeStamp;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将时间戳转换为时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeStamp 时间戳时间格式</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> format 时间格式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">stampToDate</span><span class="hljs-params">(Long timeStamp)</span> </span>&#123;<br>        SimpleDateFormat format = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        String timeFormat = format.format(<span class="hljs-keyword">new</span> Date(timeStamp));<br>        <span class="hljs-keyword">return</span> timeFormat;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>遇到此类问题，但看了文章还是未解决<br>评论或加 QQ：781378815</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🤔为什么JAVA内部类要设计成静态和非静态</title>
    <link href="/archives/41-%E4%B8%BA%E4%BB%80%E4%B9%88JAVA%E5%86%85%E9%83%A8%E7%B1%BB%E8%A6%81%E8%AE%BE%E8%AE%A1%E6%88%90%E9%9D%99%E6%80%81%E5%92%8C%E9%9D%9E%E9%9D%99%E6%80%81/"/>
    <url>/archives/41-%E4%B8%BA%E4%BB%80%E4%B9%88JAVA%E5%86%85%E9%83%A8%E7%B1%BB%E8%A6%81%E8%AE%BE%E8%AE%A1%E6%88%90%E9%9D%99%E6%80%81%E5%92%8C%E9%9D%9E%E9%9D%99%E6%80%81/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://myj.im/">⭐ 孟应杰的网站: myj.im ⭐</a></p></blockquote><h3 id="📋两种内部类用法"><a href="#📋两种内部类用法" class="headerlink" title="📋两种内部类用法"></a>📋两种内部类用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>&#123;&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticInner</span> </span>&#123;&#125;<br>&#125;<br><br>Outer outer = <span class="hljs-keyword">new</span> Outer();<br>Outer.Inner inner = outer.<span class="hljs-function">new <span class="hljs-title">Inner</span><span class="hljs-params">()</span></span>;<br>Outer.StaticInner inner0 = <span class="hljs-keyword">new</span> Outer.StaticInner();<br></code></pre></td></tr></table></figure><h3 id="🤔为什么设计内部类"><a href="#🤔为什么设计内部类" class="headerlink" title="🤔为什么设计内部类"></a>🤔为什么设计内部类</h3><p>1 在一个类内部，需要操作某种属性，而这个属性需要涉及的面又很广，我们可以考虑，将这些属性设计为内部类。</p><p>2 好比你设计类 B 的目的只是为了给类 A 使用，那么，我们就可将其设定为内部类，没有必要将类 B 设置成单独的 Java 文件，防止与其他类产生依赖关系。</p><h3 id="🎲解释"><a href="#🎲解释" class="headerlink" title="🎲解释"></a>🎲解释</h3><p>根据Oracle官方的说法：<br>Nested classes are divided into two categories: static and non-static. Nested classes that are declared static are called <em><strong>static nested classes</strong></em>. Non-static nested classes are called <em><strong>inner classes</strong></em>.<br>从字面上看，一个被称为静态嵌套类，一个被称为内部类。</p><p>从字面的角度解释是这样的：</p><p>1 什么是嵌套？嵌套就是我跟你没关系，自己可以完全独立存在，但是我就想借你的壳用一下，来隐藏一下我自己（真TM猥琐）。没有你，我也可以创建实例.</p><p>2 什么是内部？内部就是我是你的一部分，我了解你，我知道你的全部（自由使用外部类的所有变量和方法），没有你就没有我。（所以内部类对象是以外部类对象存在为前提的）</p><h3 id="🎬运用场景"><a href="#🎬运用场景" class="headerlink" title="🎬运用场景"></a>🎬运用场景</h3><p>1 那么，在设计内部类的时候我们就可以做出权衡：如果我内部类与你外部类关系不紧密，耦合程度不高，不需要访问外部类的所有属性或方法，那么我就设计成静态内部类。它可以降低包的深度，方便类的使用和管理类结构，而且，由于静态内部类与外部类并不会保存相互之间的引用，因此在一定程度上，还会节省那么一点内存资源，何乐而不为呢~~</p><p>2 既然上面已经说了什么时候应该用静态内部类，那么如果你的需求不符合静态内部类所提供的一切好处，你就应该考虑使用内部类了。最大的特点就是：你在内部类中需要访问有关外部类的所有属性及方法，我知晓你的一切… … </p><blockquote><p>官网场景用例介绍<br>传送门：<a href="http://docs.oracle.com/javase/tutorial/java/javaOO/nested.html">http://docs.oracle.com/javase/</a></p></blockquote><blockquote><p>参考<br>链接：<a href="https://www.zhihu.com/question/28197253/answer/39814613">https://www.zhihu.com/question/28197253/answer/39814613</a></p></blockquote><blockquote><p>遇到此类问题，但看了文章还是未解决<br>评论或加 QQ：781378815</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🔑json到Object到具体对象</title>
    <link href="/archives/40-json%E5%88%B0Object%E5%88%B0%E5%85%B7%E4%BD%93%E5%AF%B9%E8%B1%A1/"/>
    <url>/archives/40-json%E5%88%B0Object%E5%88%B0%E5%85%B7%E4%BD%93%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://myj.im/">⭐ 孟应杰的网站: myj.im ⭐</a></p></blockquote><h2 id="🏡环境"><a href="#🏡环境" class="headerlink" title="🏡环境"></a>🏡环境</h2><p>SpringBoot + lombok</p><h2 id="📋遇到需求"><a href="#📋遇到需求" class="headerlink" title="📋遇到需求"></a>📋遇到需求</h2><p>大概意思</p><p>给出一个参数通过URI接收一个对象test（可能是两种类的对象）和一个type（判断test类型）</p><h2 id="🌌假设："><a href="#🌌假设：" class="headerlink" title="🌌假设："></a>🌌假设：</h2><p>如果type为0，test为TestTest对象，</p><p>如果type为1，test为TestTest2对象</p><h2 id="🔬实现过程："><a href="#🔬实现过程：" class="headerlink" title="🔬实现过程："></a>🔬实现过程：</h2><p>TestTest.class和TestTest2.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTest</span> </span>&#123;<br>    String abc;<br>    String aaa;<br><br>    TestTest2 test2;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTest2</span> </span>&#123;<br>    String ddd;<br>    String ccc;<br>&#125;<br></code></pre></td></tr></table></figure><p>Controler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory.getLogger(TestController.class);<br><br>    <span class="hljs-meta">@PostMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">helloWorld</span><span class="hljs-params">(String type,</span></span><br><span class="hljs-function"><span class="hljs-params">                             <span class="hljs-meta">@RequestBody</span> Object test)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <br>        log.info(<span class="hljs-string">&quot;test &#123;&#125;&quot;</span>, test.toString());<br>        <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;0&quot;</span>)) &#123;<br>            TestTest testTest = <span class="hljs-keyword">new</span> TestTest();<br>            ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>            String testString = objectMapper.writeValueAsString(test);<br>            testTest = objectMapper.readValue(testString, TestTest.class);<br>            <span class="hljs-keyword">return</span> testTest.toString();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;1&quot;</span>))&#123;<br>            TestTest2 testTest2 = <span class="hljs-keyword">new</span> TestTest2();<br>            ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>            String testString = objectMapper.writeValueAsString(test);<br>            testTest2 = objectMapper.readValue(testString, TestTest2.class);<br>            <span class="hljs-keyword">return</span> testTest2toString();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>遇到此类问题，但看了文章还是未解决<br>评论或加 QQ：781378815</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🚥360校招——最后赢家（C++）</title>
    <link href="/archives/39-360%E6%A0%A1%E6%8B%9B-%E6%9C%80%E5%90%8E%E8%B5%A2%E5%AE%B6/"/>
    <url>/archives/39-360%E6%A0%A1%E6%8B%9B-%E6%9C%80%E5%90%8E%E8%B5%A2%E5%AE%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://myj.im/">⭐ 孟应杰的网站: myj.im ⭐</a></p></blockquote><blockquote><p>时间限制：C/C++语言 1000MS；其他语言 3000MS<br>内存限制：C/C++语言 65536KB；其他语言 589824KB</p></blockquote><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>最强的不一定是最后的赢家。</p><p>某赛事有n名选手参加，但是不同于其他的比赛，本比赛采取的是擂台赛的形式，n名选手排成一排，每次队伍的第一位和第二位选手进行比赛，输的一方会排到队尾。</p><p>当某位选手取得m连胜时，他将成为最后的赢家，且游戏结束，请问截止到游戏结束，共会进行多少次比赛。</p><p>两位选手的比赛结果由他们的战斗力决定，n位选手的战斗力是一个1~n的排列，也就是说他们的战斗力两两不同，不会有平局的情况。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>输入第一行包含两个正整数n，m，分别代表参赛选手数量和取得连胜的要求。(1&lt;=n&lt;=100000，1&lt;=m&lt;=10^9)</p><p>输入第二行包含n个正整数，中间用空格隔开，第i个数表示队伍的第i位选手的战斗力，整体是一个1~n的排列。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出仅包含一个正整数，表示截止到游戏终止，共进行多少场比赛。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>4 2<br>1 3 2 4</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>2</p><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>样例解释<br>显然第一局应该是战斗力为3的选手获胜，第二局同样是战斗力为3的选手获胜，2连胜终止游戏，所以答案是2。此时若修改m为3，则结果是5。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>解题思路写在代码的注释里</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//n，m，分别代表参赛选手数量和取得连胜的要求</span><br>    <span class="hljs-comment">//cnt记录作为基准选手的胜场数</span><br>    <span class="hljs-keyword">int</span> n, m, h, y, cnt;<br>    <span class="hljs-comment">//cnt2表示共进行了多少场比赛</span><br>    <span class="hljs-keyword">int</span> cnt2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//定义队列来存储每位选手的战斗力</span><br>    <span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-comment">//将战斗力存储在队列中</span><br>        <span class="hljs-built_in">cin</span> &gt;&gt; h;<br>        q.push(h);<br>    &#125;<br>    <span class="hljs-comment">//取出第一个队列当作基准</span><br>    h = q.front();<br>    q.pop();<br>    <span class="hljs-comment">//默认胜场为零</span><br>    cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(cnt &lt; m)&#123;<br>        <span class="hljs-comment">//一次循环代表进行一场比赛</span><br>        cnt2 ++;<br>        y = q.front();<br>        <span class="hljs-comment">//将基准h与现在队首的y相比较</span><br>        <span class="hljs-keyword">if</span>(h &gt; y)&#123;<br>            <span class="hljs-comment">//如果h胜了，他继续当基准，然后他的胜场+1</span><br>            cnt++;<br>            <span class="hljs-comment">//将队首的y取出，放到队列</span><br>            q.pop();<br>            q.push(y);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//如果y胜了，把原来的h放到队尾，然后将y作为基准，他的胜场置为1，</span><br>            q.pop();<br>            q.push(h);<br>            h = y;<br>            cnt = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; cnt2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>遇到此类问题，但看了文章还是未解决<br>评论或加 QQ：781378815</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>招聘</category>
      
      <category>笔试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🚄携程校招——携程海洋馆的海豚小宝宝（C++）</title>
    <link href="/archives/37-%E6%90%BA%E7%A8%8B%E6%A0%A1%E6%8B%9B-%E6%90%BA%E7%A8%8B%E6%B5%B7%E6%B4%8B%E9%A6%86%E7%9A%84%E6%B5%B7%E8%B1%9A%E5%B0%8F%E5%AE%9D%E5%AE%9D/"/>
    <url>/archives/37-%E6%90%BA%E7%A8%8B%E6%A0%A1%E6%8B%9B-%E6%90%BA%E7%A8%8B%E6%B5%B7%E6%B4%8B%E9%A6%86%E7%9A%84%E6%B5%B7%E8%B1%9A%E5%B0%8F%E5%AE%9D%E5%AE%9D/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://myj.im/">⭐ 孟应杰的网站: myj.im ⭐</a></p></blockquote><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>携程海洋馆中有 n 只萌萌的小海豚，初始均为 0 岁，每只小海豚的寿命是 m 岁，</p><p>且这些小海豚会在 birthYear[i] 这些年份生产出一位宝宝海豚（1 &lt;= birthYear[i] &lt;= m），每位宝宝海豚刚出生为 0 岁。</p><p>问 x 年时，携程海洋馆有多少只小海豚？</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>n（初始海豚数）</p><p>m（海豚寿命）</p><p>海豚生宝宝的年份数量(假设为p)</p><p>海豚生宝宝的年份1</p><p>…</p><p>海豚生宝宝的年份p</p><p>x（几年后）</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>x年后，共有多少只小海豚</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>5<br>5<br>2<br>2<br>4<br>5</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>20</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//n 海豚,海豚寿命m,海豚生宝宝的年份数量p,x年后</span><br>    <span class="hljs-keyword">int</span> n, m, p, x;<br>    <span class="hljs-comment">//n1表示现存的海豚，n2表示一共存在过的海豚包含死去的，由此定义数组大小</span><br>    <span class="hljs-keyword">int</span> n1,n2;<br>    <span class="hljs-comment">//arr2表示海豚来到世上第多少年，死去的海豚为-1，定义足够大来存放</span><br>    <span class="hljs-keyword">int</span> arr2[<span class="hljs-number">99999</span>];<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;<br>    n1 = n2 = n ;<br>    <span class="hljs-comment">//arr1来存放生孩子的年份</span><br>    <span class="hljs-keyword">int</span> arr1[p];<br>    <span class="hljs-comment">//输入生孩子的年份</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; p; i++)&#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; arr1[i];<br>    &#125;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; x;<br>    <span class="hljs-comment">//初始化现在海豚的来到世上的第几年，初始化为1，表示是第一年</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        arr2[i] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//进入年份循环，循环x次，表示过去x年</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= x; i++)&#123;<br>        <span class="hljs-comment">//每一年循环一边海豚的年份</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n2; j++)&#123;<br>            <span class="hljs-comment">//如果海豚年份为-1，表示已经去世</span><br>            <span class="hljs-keyword">if</span>(arr2[j] == <span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">//判断词海豚是否在生孩子的年份</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; p; k++)&#123;<br>                <span class="hljs-comment">//如果是</span><br>                <span class="hljs-keyword">if</span>(arr2[j] == arr1[k])&#123;<br>                    n1++;<br>                    n2++;<br>                    arr2[n2<span class="hljs-number">-1</span>] = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//寿命到了，置为-1，因为初始年龄为0，所以年龄等于存在的年份-1.</span><br>            <span class="hljs-keyword">if</span>(arr2[j] - <span class="hljs-number">1</span> == m)&#123;<br>                n1--;<br>                arr2[j] = <span class="hljs-number">-1</span>;<br>            &#125;<br>            arr2[j]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; n1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>遇到此类问题，但看了文章还是未解决<br>评论或加 QQ：781378815</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>招聘</category>
      
      <category>笔试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🎯美团笔试-空间回廊</title>
    <link href="/archives/36-%E7%BE%8E%E5%9B%A2%E7%AC%94%E8%AF%95-%E7%A9%BA%E9%97%B4%E5%9B%9E%E5%BB%8A/"/>
    <url>/archives/36-%E7%BE%8E%E5%9B%A2%E7%AC%94%E8%AF%95-%E7%A9%BA%E9%97%B4%E5%9B%9E%E5%BB%8A/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://myj.im/">⭐ 孟应杰的网站: myj.im ⭐</a></p></blockquote><h3 id="📌题目描述："><a href="#📌题目描述：" class="headerlink" title="📌题目描述："></a>📌题目描述：</h3><p>有一款叫做空间回廊的游戏，游戏中有着n个房间依次相连，如图，1号房间可以走到2号房间，以此类推，n号房间可以走到1号房间。</p><p>这个游戏的最终目的是为了在这些房间中留下尽可能多的烙印，在每个房间里留下烙印所花费的法力值是不相同的，已知他共有m点法力值，这些法力是不可恢复的。</p><p><img src="36-1.jpg"></p><p>小明刚接触这款游戏，所以只会耿直的玩，所以他的每一个行动都是可以预料的：</p><p>1.一开始小明位于1号房间。<br>2.如果他剩余的法力能在当前的房间中留下一个烙印，那么他就会毫不犹豫的花费法力值。<br>3.无论是否留下了烙印，下一个时刻他都会进入下一个房间，如果当前位于i房间，则会进入i+1房间，如果在n号房间则会进入1号房间。<br>4.当重复经过某一个房间时，可以再次留下烙印。</p><p>很显然，这个游戏是会终止的，即剩余的法力值不能在任何房间留下烙印的时候，游戏终止。请问他共能留下多少个烙印。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>输入第一行有两个正整数n和m，分别代表房间数量和小明拥有的法力值。(1&lt;=n&lt;=100000,1&lt;=m&lt;=10^18)<br>输入第二行有n个正整数，分别代表1~n号房间留下烙印的法力值花费。(1&lt;=a_i&lt;=10^9)</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出仅包含一个整数，即最多能留下的烙印。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>4 21<br>2 1 4 3</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>9</p><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>样例解释：<br>显然是所有房间都留下两个烙印，然后剩下1点法力值，仅能在2号房间再留下一个烙印.</p><h3 id="⌨代码实现"><a href="#⌨代码实现" class="headerlink" title="⌨代码实现"></a>⌨代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//输入房间数量m，小明拥有的法力值n</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-comment">//输入每个房间消耗的法力值</span><br>    <span class="hljs-keyword">int</span> arr[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; arr[i];<br>    &#125;<br>    <span class="hljs-comment">//定义两个变量，cnt用来计数，记录留下的烙印数</span><br>    <span class="hljs-comment">//sign,为设立的标志，当小明在一圈中消耗过法力值，标志位置为1，</span><br>    <span class="hljs-comment">//如果一圈下来sign=0，那么代表这一圈小明没有消耗法力值，那么就可以结束循环了。</span><br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> sign = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//循环开始，因为不知道要循环多少遍，所以中间参数为空</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;  ; i++ )&#123;<br>        <span class="hljs-comment">//如果法力值大于当前格子的法力值</span><br>        <span class="hljs-keyword">if</span>( m &gt;= arr[i])&#123;<br>            m = m - arr[i]; <span class="hljs-comment">//法力值减去当前格子的法力值</span><br>            cnt++;          <span class="hljs-comment">//烙印数+1</span><br>            sign = <span class="hljs-number">1</span>;       <span class="hljs-comment">//本圈消耗了法力值，sign=1</span><br>        &#125;<br>        <span class="hljs-comment">//当i = n - 1，说明一次循环结束，如果sign=1，则需要进行下一轮循环</span><br>        <span class="hljs-comment">//那么就把sign归0，有因为结束时会有i++，所以i=0-1，那么就开启新一轮循环</span><br>        <span class="hljs-keyword">if</span>((i == n - <span class="hljs-number">1</span>) &amp;&amp; (sign == <span class="hljs-number">1</span>))&#123;<br>            sign = <span class="hljs-number">0</span>;<br>            i = <span class="hljs-number">0</span><span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-comment">//当i = n - 1，循环结束，sign=0，则不需要继续循环，直接跳出死循环。</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((i == n - <span class="hljs-number">1</span>) &amp;&amp; (sign == <span class="hljs-number">0</span>))&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>遇到此类问题，但看了文章还是未解决<br>评论或加 QQ：781378815</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>招聘</category>
      
      <category>笔试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
